#!/usr/bin/env python3.8
from subprocess import Popen, PIPE
from pynput.keyboard import Key, Listener
import sys
import json
import os

cwd = os.getcwd()
snapshot_command = sys.argv[1:][0]

def check_pid(pid):        
    """ Check For the existence of a unix pid. """
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

selected = 0

try:
    processes = json.loads(open("/tmp/snapshot").read())
except:
    processes = []

if snapshot_command != "status":
    branches = Popen(["bash", "-c", "git branch -v | grep snapshot"], stdout=PIPE)
    branches_stdout, branches_stderr = branches.communicate()
    known_branches = branches_stdout.decode('utf-8').split("\n")
    known_branches.pop()
    branch_name = "snapshot-{}".format(len(known_branches))
    snapshot_directory = "/tmp/snapshots/{}".format(branch_name)
    command = ["bash", "-c", "refdir=$(pwd) ; mkdir -p /tmp/snapshots/ ; repo=$(git remote -v | grep fetch | awk '{{print $2}}' ); echo $repo ; git clone $repo {} --reference-if-able $refdir".format(snapshot_directory)]
    clone = Popen(command)
    clone.wait()

    run_command = sys.argv[1:]
    output_file = "/tmp/snapshot-{}".format(len(processes))
    push_command = ["bash", "-c", "git checkout -b {} ; git add . ; git commit -m \"{}\" ; git push -u origin {}".format(branch_name, run_command, branch_name)]
    print(push_command)
    checkout_command  = Popen(push_command)
    checkout_command.wait()
    os.chdir(snapshot_directory)
    checkout_command = ["bash", "-c", "git fetch ; git checkout {} ; git pull".format(branch_name)]
    print(checkout_command)
    checkout_command  = Popen(checkout_command)
    checkout_command.wait()
    process = Popen(run_command, stdout=open(output_file, "w"))
    processes.append({"process": sys.argv, "pid": process.pid, "output_file": output_file})

    os.chdir(cwd)
    return_command = Popen(["bash", "-c", "git checkout master"])
    return_command.wait() 


if snapshot_command == "clean":
    removal = []
    for process in processes:
        if not check_pid(process["pid"]):
            removal.append(process)

    if removal:
        for process in removal:
            processes.remove(process)

open("/tmp/snapshot", "w").write(json.dumps(processes))

def show_menu():
    for i, process in enumerate(processes):
        sys.stdout.write("\033[F\033[K")
    for i, process in enumerate(processes):
        sys.stdout.write("\r{} {}. {} {}\033[1B".format(i, ">" if selected == i else " ", process["process"], "<" if selected == i else " "))

def up():
    global selected
    if selected == 1:
        return
    selected -= 1
    show_menu()

def down():
    global selected
    if selected == 4:
        return
    selected += 1
    show_menu()

def on_press(key):
    if key == Key.enter:
        return False

def on_release(key):
    if key == key.up:
        up()
    if key == key.down:
        down()


if snapshot_command == "status":
    if len(processes) > 0:
        print("Choose process:")
        show_menu()
        with Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()
        active_process = processes[selected]
        output_file = active_process["output_file"]
        process = Popen(["less", "+F", "-r", output_file])
        process.wait()
    else:
        print("No processes running.")
